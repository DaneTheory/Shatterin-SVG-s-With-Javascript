{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/whatwg-fetch/fetch.js","src/js/AuthVerification.js","src/js/Configs.js","src/js/Globals.js","src/js/LogoAnimation.js","src/js/Utils.js","src/js/scripts.js"],"names":[],"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","file":"scripts.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","import 'whatwg-fetch'\n\n\nconst AuthVerification = () => {\n  const sumbitBttn = document.querySelector('#verificationSumbitButton')\n  const authInputEl = document.querySelector('#inputAuth')\n  const authEndpoint = `https://jp.neimanmarcus.com.localised.com/Prod/login`\n\n  const successEl = document.querySelector('.done')\n  const failEl = document.querySelector('.failed')\n\n  let isLoading\n\n  const beginFetch = () => {\n    sumbitBttn.classList.remove('verificationSumbitButton')\n    sumbitBttn.classList.add('spinner')\n    return reqApi()\n  }\n\n  const endFetch = () => {\n    sumbitBttn.classList.remove('spinner')\n    return reqApi()\n  }\n\n  const reqApi = async (resStatus) => {\n    const mockReq = await setTimeout(() => {\n      resStatus = true\n      return resStatus ? onSuccess() : onFailure()\n    }, 5000)\n    return mockReq\n  }\n\n  const onSuccess = async() => {\n    const mockSuccess = async() => {\n      sumbitBttn.classList.add('hide-loading')\n      sumbitBttn.classList.remove('spinner')\n      return document.getElementById('login_success').style.visibility = 'visible'\n    }\n    return await mockSuccess()\n      .then(()=> resetSubmitState())\n      .catch((e) => {\n        const err = new Error(e)\n        console.log(e)\n        return err\n      })\n  }\n\n  const onFailure = async() => {\n    const mockFailure = async() => {\n      sumbitBttn.classList.add('hide-loading')\n      sumbitBttn.classList.remove('spinner')\n      return document.getElementById('login_fail').style.visibility = 'visible'\n    }\n    return await mockFailure()\n      .then(()=> resetSubmitState())\n      .catch((e) => {\n        const err = new Error(e)\n        console.log(e)\n        return err\n      })\n  }\n\n  const resetSubmitState = async() => {\n    const reset = await setTimeout(() => {\n      sumbitBttn.classList.remove('hide-loading')\n      document.getElementById('login_success').style.visibility = 'hidden'\n      document.getElementById('login_fail').style.visibility = 'hidden'\n      sumbitBttn.classList.add('verificationSumbitButton')\n    }, 2500)\n    return reset\n  }\n\n  const validateEmailHandler = (emailAddress) => /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(emailAddress) ? true : false\n\n  const loginWithEmailAddress = async(emailVal) => {\n    try {\n      const login = await fetch(authEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: emailVal,\n        })\n      })\n      return login\n    } catch(e) {\n      const err = new Error(e)\n      console.log(err)\n      return err\n    }\n  }\n\n\n  const submitUserInput = () => {\n    const authSuccessRes = 'Authentication successful'\n    const validEmail = 'alpha.neimanmarcus@localised.com'\n    const invalidEmail = 'badEmail.neimanmarcus@localised.com'\n\n    isLoading = false\n    const isInValidEmailInputMessage = `The email address provided is not a valid email format`\n    const isInValidEmailMessage = `The email address provided is not authorized for access`\n\n    return Promise.resolve(isLoading)\n      .then(() => validateEmailHandler(authInputEl.value))\n      .then(isVaildFormatCheck => {\n        return isVaildFormatCheck ? (() => {\n          document.querySelector('#verification_message').textContent = ''\n          return true\n        })()\n        :\n        (() => {\n          document.querySelector('#verification_message').textContent = isInValidEmailInputMessage\n          return false\n        })()\n      })\n      .then(inputVal => inputVal ? loginWithEmailAddress(authInputEl.value) : null)\n      .then(res => {\n        // console.log(res.json())\n        return res.json()\n      })\n      .then(data => {\n        // console.log(data)\n        // console.log(data.message)\n        return data.message === authSuccessRes ? true : false\n      })\n      .then(res => {\n        // console.log(res)\n        // console.log(window.location.pathname)\n        return res ? window.location.replace(window.location.pathname = '/') : null\n      })\n      // .then(inputVal => inputVal ? beginFetch(isLoading) : endFetch(isLoading))\n      .catch((e) => {\n        const err = new Error(e)\n        console.log(e)\n        return err\n      })\n  }\n\n  sumbitBttn.addEventListener('click', submitUserInput, false)\n}\n\nexport default AuthVerification\n","export const TMaxConfig = {\n  logoPathsArray: Array.from(document.querySelectorAll('#logo *:not(.logo_icon)')),\n  animationOptions: {\n    onStart: () => console.log(''),\n    onComplete: () => console.log(''),\n    onCompleteAll: () => console.log(''),\n    immediateRender: true,\n    lazy: true,\n    repeat: 0,\n    repeatDelay: 0,\n    yoyo: false,\n    timeScaleVal: 0.45\n  },\n  staggerOptions: {\n    duration: 1,\n    val: 0.01111115,\n    result: {\n      x: 0,\n      y: 0,\n      opacity: 1,\n      scale: 1,\n      rotation: 0\n    }\n  }\n}\n","import { TMaxConfig } from './Configs'\n\n\nexport const TlMax = (() => {\n  const tlMax = new TimelineMax(TMaxConfig.animationOptions)\n  CSSPlugin.useSVGTransformAttr = true\n  tlMax.data = {\n    someData: 'hello'\n  }\n  tlMax.smoothChildTiming = true\n  tlMax.timeScale(TMaxConfig.animationOptions.timeScaleVal)\n  return tlMax\n})()\n","import { TlMax } from './Globals'\nimport { TMaxConfig } from './Configs'\nimport { Randomize } from './Utils'\n\n\nconst LogoAnimation = () => {\n  return Promise.resolve()\n    .then(() => {\n      const cssToAnimate = (svgPath) => {\n        return TlMax.set(svgPath, {\n          x: Randomize(-3000, 1500),\n          y: Randomize(-1000, 2500),\n          rotation: Randomize(-520, 520),\n          scale: Randomize(0, 15),\n          opacity: Randomize(-5, -1)\n        })\n      }\n      return TMaxConfig.logoPathsArray.map(path => cssToAnimate(path))\n    })\n    .then(() => {\n      return TlMax.staggerTo(\n        TMaxConfig.logoPathsArray,\n        TMaxConfig.staggerOptions.duration,\n        TMaxConfig.staggerOptions.result,\n        TMaxConfig.staggerOptions.val\n      )\n    })\n    .catch(e => {\n      const errObj = new Error(e)\n      console.log(errObj)\n      return errObj\n    })\n}\n\n\nexport default LogoAnimation\n","export const Randomize = (min, max) => {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport const Extend = (a, b) => {\n  for(var key in b) {\n    if( b.hasOwnProperty( key ) ) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n}\n\nexport const CreateDOMEl = (type, className, content) => {\n  var el = document.createElement(type);\n  el.className = className || '';\n  el.innerHTML = content || '';\n  return el;\n}\n","import LogoAnimation from './LogoAnimation'\nimport AuthVerification from './AuthVerification'\n\n\n((window, document, undefined) => {\n\n  // SVG Logo Animation\n  LogoAnimation()\n\n  // Verify Auth Access\n  AuthVerification()\n\n})(window, document)\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}